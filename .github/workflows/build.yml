# TODO: This document needs to be formatted,
# appimage should use linuxdeploy probably
# some stuff needs cleaned up etc
name: eden-build

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request_target:
    branches: [ master ]

jobs:
  source:
    if: ${{ !github.head_ref }}
    runs-on: linux
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source.sh
      - name: Upload
        uses: forgejo/upload-artifact@v4
        with:
          name: source.zip
          path: artifacts/
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc"] # TODO: Add msys2
    defaults:
      run:
        shell: ${{ (matrix.target == 'msys2' && 'msys2') || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ runner.workspace }}/.cache/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true

      - name: Set up vcpkg cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/build/externals
            ${{ github.workspace }}/.vcpkg
          key: ${{ runner.os }}-${{ matrix.target }}-vcpkg-${{ hashFiles('**/CMakeLists.txt', '**/vcpkg.json') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-vcpkg-

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools
        run: choco install ccache ninja wget cygwin
        if: ${{ matrix.target == 'msvc' }}
      - name: Install vulkan-SDK
        run: ./.ci/install-vulkan-sdk.ps1
        shell: pwsh
      - name: Cygwin with autoconf # NEEDED FOR LIBUSB
        shell: cmd
        run: |
          C:\tools\cygwin\cygwinsetup.exe -q -P autoconf,automake,libtool,make,pkg-config

          REM Create wrapper batch files for Cygwin tools in a directory that will be in PATH
          mkdir C:\cygwin-wrappers

          REM Create autoconf.bat wrapper
          echo @echo off > C:\cygwin-wrappers\autoconf.bat
          echo C:\tools\cygwin\bin\bash.exe -l -c "autoconf %%*" >> C:\cygwin-wrappers\autoconf.bat

          REM Add other wrappers if needed for other Cygwin tools
          echo @echo off > C:\cygwin-wrappers\automake.bat
          echo C:\tools\cygwin\bin\bash.exe -l -c "automake %%*" >> C:\cygwin-wrappers\automake.bat

          REM Add the wrappers directory to PATH
          echo C:\cygwin-wrappers>>"%GITHUB_PATH%"
          echo C:\tools\cygwin\bin>>"%GITHUB_PATH%"
      - name: CMake Configure
        id: cmake
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_TOOLCHAIN_FILE="%CD%\..\CMakeModules\MSVCCache.cmake" -DYUZU_USE_BUNDLED_QT=ON -DENABLE_QT_TRANSLATION=ON -DUSE_DISCORD_PRESENCE=ON -DYUZU_USE_BUNDLED_VCPKG=ON -DYUZU_USE_BUNDLED_SDL2=ON -DUSE_CCACHE=ON
      - name: Build
        id: build
        shell: cmd
        run: |
          cd build
          ninja yuzu yuzu-cmd yuzu-room tests -j4
          ccache -s -v
      - name: Package artifacts
        if: steps.build.outcome == 'success'
        shell: pwsh
        run: |
          $GITDATE = $(git show -s --date=short --format='%ad') -replace "-", ""
          $GITREV = $(git show -s --format='%h')
          $RELEASE_DIST = "eden-windows-msvc"
          $ARTIFACTS_DIR = "${{ github.workspace }}/artifacts"

          mkdir -p $ARTIFACTS_DIR
          mkdir -p $RELEASE_DIST
          mkdir -p pdb

          Copy-Item "build/bin/Release/*" -Destination "$RELEASE_DIST" -Recurse -ErrorAction SilentlyContinue
          if (-not $?) {
            # Try without Release subfolder if that doesn't exist
            Copy-Item "build/bin/*" -Destination "$RELEASE_DIST" -Recurse -ErrorAction SilentlyContinue
          }

          Get-ChildItem "build/bin/" -Recurse -Filter "*.pdb" | Copy-Item -destination .\pdb -ErrorAction SilentlyContinue

          $BUILD_ZIP = "eden-windows-msvc-$GITDATE-$GITREV.zip"
          $BUILD_PDB = "eden-windows-msvc-$GITDATE-$GITREV-debugsymbols.zip"
          $BUILD_7Z = "eden-windows-msvc-$GITDATE-$GITREV.7z"

          7z a -tzip $BUILD_ZIP $RELEASE_DIST\*

          if (Test-Path -Path ".\pdb\*.pdb") {
            7z a -tzip $BUILD_PDB .\pdb\*.pdb
            Move-Item $BUILD_PDB $ARTIFACTS_DIR/ -ErrorAction SilentlyContinue
          }

          7z a $BUILD_7Z $RELEASE_DIST

          Move-Item $BUILD_ZIP $ARTIFACTS_DIR/ -ErrorAction SilentlyContinue
          Move-Item $BUILD_7Z $ARTIFACTS_DIR/ -ErrorAction SilentlyContinue

          Copy-Item "LICENSE*" -Destination "$RELEASE_DIST" -ErrorAction SilentlyContinue
          Copy-Item "README*" -Destination "$RELEASE_DIST" -ErrorAction SilentlyContinue
      - name: Upload Windows artifacts
        if: steps.build.outcome == 'success'
        uses: forgejo/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.zip
          path: artifacts/*
  linux:
    runs-on: linux
    env:
      CCACHE_DIR: /home/runner/.cache/ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: fresh
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true

      - name: Build
        run: ./.ci/linux.sh

      - name: Package AppImages
        run: |
          ./AppImage-build-local.sh

      - name: Upload Linux artifacts
        uses: forgejo/upload-artifact@v4
        with:
          name: linux.zip
          path: *.AppImage

  android:
    runs-on: android

    env:
      CCACHE_DIR: /home/runner/.cache/ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set tag name
        run: |
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
              echo "GIT_TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi
          echo $GIT_TAG_NAME

      - name: Deps
        run: |
          sudo apt-get update -y
          sudo apt-get install ccache glslang-dev glslang-tools apksigner -y

      - name: Build
        run: JAVA_HOME=$JAVA_HOME_21_X64 ./.ci/android.sh

      - name: Package Android artifacts
        run: |
          GITDATE="$(git show -s --date=short --format='%ad' | sed 's/-//g')"
          GITREV="$(git show -s --format='%h')"
          ARTIFACTS_DIR="$PWD/artifacts"
          mkdir -p "${ARTIFACTS_DIR}/"

          REV_NAME="eden-android-${GITDATE}-${GITREV}"
          BUILD_FLAVOR="mainline"
          BUILD_TYPE_LOWER="release"
          BUILD_TYPE_UPPER="Release"

          cp src/android/app/build/outputs/apk/"${BUILD_FLAVOR}/${BUILD_TYPE_LOWER}/app-${BUILD_FLAVOR}-${BUILD_TYPE_LOWER}.apk" \
             "${ARTIFACTS_DIR}/${REV_NAME}.apk" || echo "APK not found"

          cp src/android/app/build/outputs/bundle/"${BUILD_FLAVOR}${BUILD_TYPE_UPPER}"/"app-${BUILD_FLAVOR}-${BUILD_TYPE_LOWER}.aab" \
             "${ARTIFACTS_DIR}/${REV_NAME}.aab" || echo "AAB not found"

          ls -la "${ARTIFACTS_DIR}/"

      - name: Upload Android artifacts
        uses: forgejo/upload-artifact@v4
        with:
          name: android.zip
          path: artifacts/*
